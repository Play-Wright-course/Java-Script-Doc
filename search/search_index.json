{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to JavaScript &amp; Playwright Docs","text":"<p>This documentation site contains tutorials, examples, and references for JavaScript concepts and Playwright automation.</p> <p>Explore the sections on the left to learn about:</p> <ul> <li>Variables, Data Types, and Operators</li> <li>Flow Statements</li> <li>Functions</li> <li>Arrays &amp; Objects</li> <li>Playwright Automation Concepts</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li>Click on a topic in the navigation sidebar.</li> <li>Follow the examples and code snippets.</li> <li>Use this documentation as a reference for coding interviews and automation projects.</li> </ol> <p>\ud83d\ude80 Happy Learning! Keep practicing and building your JavaScript and Playwright skills.</p>"},{"location":"javascriptConcepts/Arrays/","title":"6. Arrays &amp; Objects in JavaScript \u2013 Deep Dive","text":"<p>Arrays and objects are fundamental data structures in JavaScript used to store collections of data.</p> <p>This guide covers arrays, objects, basic operations, and common interview programs.</p>"},{"location":"javascriptConcepts/Arrays/#arrays","title":"\ud83d\udd39 Arrays","text":"<p>Arrays store multiple values in an ordered list.</p>"},{"location":"javascriptConcepts/Arrays/#creating-arrays","title":"Creating Arrays","text":"<pre><code>let numbers = [1, 2, 3, 4, 5];\nlet fruits = [\"apple\", \"banana\", \"mango\"];\nlet mixed = [1, \"apple\", true, 'c']; // mixed data types\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#accessing-elements","title":"Accessing Elements","text":"<pre><code>console.log(numbers[0]); // 1\nconsole.log(fruits[2]);  // mango\nconsole.log(mixed[1]);   // apple\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#array-length","title":"Array Length","text":"<pre><code>console.log(numbers.length); // 5\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#adding-elements","title":"Adding Elements","text":"<pre><code>numbers.push(6);   // add at end\nnumbers.unshift(0); // add at beginning\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#removing-elements","title":"Removing Elements","text":"<pre><code>numbers.pop();    // remove last\nnumbers.shift();  // remove first\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#iterating-over-an-array","title":"Iterating Over an Array","text":"<pre><code>let arr = [10, 20, 30, 40];\n\n// Using for loop\nfor(let i = 0; i &lt; arr.length; i++) {\n  console.log(arr[i]);\n}\n\n// Using for...of loop\nfor(let value of arr) {\n  console.log(value);\n}\n\n// Using forEach\narr.forEach(value =&gt; console.log(value));\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#common-array-programs-interview-questions","title":"\ud83d\udd39 Common Array Programs (Interview Questions)","text":""},{"location":"javascriptConcepts/Arrays/#1-reverse-an-array","title":"1. Reverse an Array","text":"<pre><code>let arr = [1, 2, 3, 4, 5];\narr.reverse();\nconsole.log(arr); // [5,4,3,2,1]\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#2-find-maximum-minimum","title":"2. Find Maximum &amp; Minimum","text":"<pre><code>let arr = [5, 12, 7, 1, 19];\nlet max = Math.max(...arr);\nlet min = Math.min(...arr);\nconsole.log(max); // 19\nconsole.log(min); // 1\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#3-sum-of-array-elements","title":"3. Sum of Array Elements","text":"<pre><code>let arr = [1,2,3,4,5];\nlet sum = arr.reduce((acc, val) =&gt; acc + val, 0);\nconsole.log(sum); // 15\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#4-find-average-of-array","title":"4. Find Average of Array","text":"<pre><code>let arr = [10,20,30,40];\nlet avg = arr.reduce((a,b) =&gt; a+b,0)/arr.length;\nconsole.log(avg); // 25\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#5-find-even-and-odd-numbers","title":"5. Find Even and Odd Numbers","text":"<pre><code>let arr = [1,2,3,4,5,6];\nlet even = arr.filter(x =&gt; x % 2 === 0);\nlet odd = arr.filter(x =&gt; x % 2 !== 0);\nconsole.log(even); // [2,4,6]\nconsole.log(odd);  // [1,3,5]\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#6-sort-array","title":"6. Sort Array","text":"<pre><code>let arr = [5,1,8,3];\narr.sort((a,b) =&gt; a-b);\nconsole.log(arr); // [1,3,5,8]\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#7-find-string-with-max-and-min-length","title":"7. Find String with Max and Min Length","text":"<pre><code>let fruits = [\"apple\", \"banana\", \"kiwi\", \"mango\"];\nlet maxLen = fruits.reduce((a,b) =&gt; a.length &gt;= b.length ? a : b);\nlet minLen = fruits.reduce((a,b) =&gt; a.length &lt;= b.length ? a : b);\nconsole.log(maxLen); // banana\nconsole.log(minLen); // kiwi\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#objects","title":"\ud83d\udd39 Objects","text":"<p>Objects store data in key-value pairs.</p>"},{"location":"javascriptConcepts/Arrays/#creating-objects","title":"Creating Objects","text":"<pre><code>let person = {\n  name: \"Nitin\",\n  age: 25,\n  city: \"Mumbai\"\n};\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#accessing-properties","title":"Accessing Properties","text":"<pre><code>console.log(person.name);  // Nitin\nconsole.log(person['age']); // 25\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#adding-updating-properties","title":"Adding &amp; Updating Properties","text":"<pre><code>person.country = \"India\"; // add\nperson.age = 26;            // update\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#deleting-properties","title":"Deleting Properties","text":"<pre><code>delete person.city;\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#iterating-over-object","title":"Iterating Over Object","text":"<pre><code>for (let key in person) {\n  console.log(key, person[key]);\n}\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#summary","title":"\u2705 Summary","text":"<ul> <li>Arrays \u2192 Ordered collection of items, methods: push, pop, shift, unshift, reverse, sort, filter, reduce. Can contain mixed data types.</li> <li>Objects \u2192 Key-value storage, access via dot or bracket notation, dynamic addition/deletion, iteration with <code>for...in</code>.</li> <li>Common Interview Programs \u2192 Reverse array, max/min, sum, average, even/odd numbers, string with max/min length.</li> <li>Iteration \u2192 for loop, for...of loop, forEach method.</li> </ul> <p>These are essential for coding interviews, JavaScript development, and Playwright automation.</p>"},{"location":"javascriptConcepts/dataTypes/","title":"5. Data Types in JavaScript \u2013 Deep Dive","text":"<p>JavaScript has different types of data used to store values and perform operations. Understanding data types is crucial for writing efficient code.</p> <p>This guide covers primitive types, non-primitive types, type checking, and common interview programs.</p>"},{"location":"javascriptConcepts/dataTypes/#primitive-data-types","title":"\ud83d\udd39 Primitive Data Types","text":"<p>Primitive data types are immutable and include:</p> <ol> <li>Number \u2013 Numeric values</li> <li>String \u2013 Sequence of characters</li> <li>Boolean \u2013 true or false</li> <li>Undefined \u2013 Variable declared but not assigned</li> <li>Null \u2013 Intentionally empty value</li> <li>Symbol \u2013 Unique and immutable value</li> <li>BigInt \u2013 Large integer values</li> </ol>"},{"location":"javascriptConcepts/dataTypes/#examples","title":"Examples","text":"<pre><code>// Number\nlet age = 25;\n\n// String\nlet name = \"Nitin\";\n\n// Boolean\nlet isActive = true;\n\n// Undefined\nlet city;\n\n// Null\nlet country = null;\n\n// Symbol\nlet sym = Symbol('id');\n\n// BigInt\nlet bigNumber = 123456789012345678901234567890n;\n</code></pre>"},{"location":"javascriptConcepts/dataTypes/#checking-data-types","title":"Checking Data Types","text":"<pre><code>console.log(typeof age);       // number\nconsole.log(typeof name);      // string\nconsole.log(typeof isActive);  // boolean\nconsole.log(typeof city);      // undefined\nconsole.log(typeof country);   // object (this is a known JS quirk)\nconsole.log(typeof sym);       // symbol\nconsole.log(typeof bigNumber); // bigint\n</code></pre>"},{"location":"javascriptConcepts/dataTypes/#non-primitive-data-types","title":"\ud83d\udd39 Non-Primitive Data Types","text":"<p>Non-primitive types are mutable and include:</p> <ol> <li>Object \u2013 Key-value pairs</li> <li>Array \u2013 Ordered collection (special type of object)</li> <li>Function \u2013 Callable objects</li> </ol>"},{"location":"javascriptConcepts/dataTypes/#examples_1","title":"Examples","text":"<pre><code>// Object\nlet person = { name: \"Nitin\", age: 25 };\n\n// Array\nlet fruits = [\"apple\", \"banana\", \"mango\"];\n\n// Function\nfunction greet() {\n  console.log(\"Hello\");\n}\n</code></pre>"},{"location":"javascriptConcepts/dataTypes/#checking-data-types_1","title":"Checking Data Types","text":"<pre><code>console.log(typeof person); // object\nconsole.log(typeof fruits); // object\nconsole.log(typeof greet);  // function\n</code></pre>"},{"location":"javascriptConcepts/dataTypes/#type-conversion","title":"\ud83d\udd39 Type Conversion","text":"<p>JavaScript allows explicit and implicit type conversions.</p>"},{"location":"javascriptConcepts/dataTypes/#implicit-conversion","title":"Implicit Conversion","text":"<pre><code>let result = '5' + 5; // '55' (number converted to string)\nconsole.log(result);\n\nlet value = '10' - 2; // 8 (string converted to number)\nconsole.log(value);\n</code></pre>"},{"location":"javascriptConcepts/dataTypes/#explicit-conversion","title":"Explicit Conversion","text":"<pre><code>let str = String(123); // '123'\nlet num = Number('456'); // 456\nlet bool = Boolean(0);    // false\n</code></pre>"},{"location":"javascriptConcepts/dataTypes/#common-interview-programs","title":"\ud83d\udd39 Common Interview Programs","text":""},{"location":"javascriptConcepts/dataTypes/#1-check-if-variable-is-array","title":"1. Check if Variable is Array","text":"<pre><code>let arr = [1,2,3];\nconsole.log(Array.isArray(arr)); // true\n</code></pre>"},{"location":"javascriptConcepts/dataTypes/#2-convert-string-to-number","title":"2. Convert String to Number","text":"<pre><code>let str = '123';\nlet num = Number(str);\nconsole.log(num); // 123\n</code></pre>"},{"location":"javascriptConcepts/dataTypes/#3-convert-number-to-string","title":"3. Convert Number to String","text":"<pre><code>let num = 456;\nlet str = String(num);\nconsole.log(str); // '456'\n</code></pre>"},{"location":"javascriptConcepts/dataTypes/#4-check-data-type","title":"4. Check Data Type","text":"<pre><code>let value = true;\nconsole.log(typeof value); // boolean\n</code></pre>"},{"location":"javascriptConcepts/dataTypes/#summary","title":"\u2705 Summary","text":"<ul> <li>Primitive types \u2192 number, string, boolean, undefined, null, symbol, bigint. Immutable.</li> <li>Non-primitive types \u2192 object, array, function. Mutable.</li> <li>Type checking \u2192 <code>typeof</code>, <code>Array.isArray()</code>.</li> <li>Type conversion \u2192 Implicit (coercion) and explicit (String(), Number(), Boolean()).</li> </ul> <p>Understanding data types is fundamental for JavaScript development, debugging, and coding interviews.</p>"},{"location":"javascriptConcepts/flow-statement/","title":"4. Control Flow in JavaScript \u2013 Deep Dive","text":"<p>Control flow determines the order in which code executes. JavaScript provides control flow statements like if...else, switch, loops (for, while, do...while), break/continue.  </p>"},{"location":"javascriptConcepts/flow-statement/#if-statement","title":"\ud83d\udd39 <code>if</code> Statement","text":"<p>Executes a block of code if a condition is true.</p>"},{"location":"javascriptConcepts/flow-statement/#syntax","title":"Syntax","text":"<pre><code>if (condition) {\n  // code to run if condition is true\n}\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#example-if","title":"Example \u2013 <code>if</code>","text":"<pre><code>let score = 85;\n\nif (score &gt;= 50) {\n  console.log(\"Pass\");\n}\n</code></pre> <p>Playwright Use Case: Check if an element exists before performing an action.</p>"},{"location":"javascriptConcepts/flow-statement/#ifelse-statement","title":"\ud83d\udd39 <code>if...else</code> Statement","text":"<p>Executes one block if condition is true, another if false.</p>"},{"location":"javascriptConcepts/flow-statement/#syntax_1","title":"Syntax","text":"<pre><code>if (condition) {\n  // code if true\n} else {\n  // code if false\n}\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#example-ifelse","title":"Example \u2013 <code>if...else</code>","text":"<pre><code>let score = 40;\n\nif (score &gt;= 50) {\n  console.log(\"Pass\");\n} else {\n  console.log(\"Fail\");\n}\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#ifelse-ifelse-statement","title":"\ud83d\udd39 <code>if...else if...else</code> Statement","text":"<p>Used when multiple conditions need to be checked sequentially.</p>"},{"location":"javascriptConcepts/flow-statement/#syntax_2","title":"Syntax","text":"<pre><code>if (condition1) {\n  // code1\n} else if (condition2) {\n  // code2\n} else {\n  // default code\n}\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#example-ifelse-ifelse","title":"Example \u2013 <code>if...else if...else</code>","text":"<pre><code>let marks = 75;\n\nif (marks &gt;= 90) {\n  console.log(\"Grade A\");\n} else if (marks &gt;= 75) {\n  console.log(\"Grade B\");\n} else if (marks &gt;= 50) {\n  console.log(\"Grade C\");\n} else {\n  console.log(\"Fail\");\n}\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#switch-statement","title":"\ud83d\udd39 <code>switch</code> Statement","text":"<p>An alternative to multiple <code>if...else if</code> conditions.  </p>"},{"location":"javascriptConcepts/flow-statement/#syntax_3","title":"Syntax","text":"<pre><code>switch(expression) {\n  case value1:\n    // code\n    break;\n  case value2:\n    // code\n    break;\n  default:\n    // code if no case matches\n}\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#example-switch","title":"Example \u2013 <code>switch</code>","text":"<pre><code>let day = 3;\n\nswitch(day) {\n  case 1:\n    console.log(\"Monday\");\n    break;\n  case 2:\n    console.log(\"Tuesday\");\n    break;\n  case 3:\n    console.log(\"Wednesday\");\n    break;\n  default:\n    console.log(\"Another day\");\n}\n</code></pre> <p>Playwright Use Case: Decide which browser or test scenario to run based on a config variable.</p>"},{"location":"javascriptConcepts/flow-statement/#for-loop","title":"\ud83d\udd39 <code>for</code> Loop","text":"<p>Repeats a block of code a fixed number of times.</p>"},{"location":"javascriptConcepts/flow-statement/#syntax_4","title":"Syntax","text":"<pre><code>for (initialization; condition; increment) {\n  // code block\n}\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#example-for","title":"Example \u2013 <code>for</code>","text":"<pre><code>for (let i = 1; i &lt;= 5; i++) {\n  console.log(\"Count:\", i);\n}\n</code></pre> <p>Playwright Use Case: Iterate through a list of elements to perform actions like click or validate text.</p>"},{"location":"javascriptConcepts/flow-statement/#while-loop","title":"\ud83d\udd39 <code>while</code> Loop","text":"<p>Repeats as long as a condition is true.</p>"},{"location":"javascriptConcepts/flow-statement/#syntax_5","title":"Syntax","text":"<pre><code>while (condition) {\n  // code block\n}\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#example-while","title":"Example \u2013 <code>while</code>","text":"<pre><code>let i = 1;\nwhile (i &lt;= 5) {\n  console.log(\"Count:\", i);\n  i++;\n}\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#dowhile-loop","title":"\ud83d\udd39 <code>do...while</code> Loop","text":"<p>Executes the code block at least once, then checks the condition.</p>"},{"location":"javascriptConcepts/flow-statement/#syntax_6","title":"Syntax","text":"<pre><code>do {\n  // code block\n} while (condition);\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#example-dowhile","title":"Example \u2013 <code>do...while</code>","text":"<pre><code>let i = 6;\ndo {\n  console.log(\"Count:\", i);\n  i++;\n} while (i &lt;= 5);  // runs once even though condition is false\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#break-and-continue","title":"\ud83d\udd39 <code>break</code> and <code>continue</code>","text":"<p>JavaScript <code>break</code> and <code>continue</code> work the same way as in Java. - <code>break</code> \u2192 exits the loop immediately - <code>continue</code> \u2192 skips the current iteration and moves to next</p>"},{"location":"javascriptConcepts/flow-statement/#example-break-continue","title":"Example \u2013 <code>break</code> &amp; <code>continue</code>","text":"<pre><code>for (let i = 1; i &lt;= 5; i++) {\n  if (i === 3) break;      // stops loop at 3\n  console.log(i);\n}\n\nfor (let i = 1; i &lt;= 5; i++) {\n  if (i === 3) continue;   // skips 3\n  console.log(i);\n}\n</code></pre> <p>Java Example (for comparison)</p> <pre><code>for (int i = 1; i &lt;= 5; i++) {\n    if (i == 3) break; // exits loop at 3\n    System.out.println(i);\n}\n\nfor (int i = 1; i &lt;= 5; i++) {\n    if (i == 3) continue; // skips 3\n    System.out.println(i);\n}\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#summary","title":"\u2705 Summary","text":"<ul> <li>Conditional Statements: <code>if</code>, <code>if...else</code>, <code>if...else if...else</code>, <code>switch</code> </li> <li>Loops: <code>for</code>, <code>while</code>, <code>do...while</code> </li> <li>Loop Control: <code>break</code>, <code>continue</code> </li> </ul> <p>These control flow statements are essential for decision-making and iteration in JavaScript and Playwright tests.</p>"},{"location":"javascriptConcepts/functions/","title":"5. Functions in JavaScript \u2013 Basics","text":"<p>Functions in JavaScript are reusable blocks of code that perform a specific task. They help organize code, reduce repetition, and return values.</p> <p>This guide covers how to create functions, call them, pass parameters, return values (int, list/array), and basic usage.</p>"},{"location":"javascriptConcepts/functions/#function-declaration","title":"\ud83d\udd39 Function Declaration","text":"<p>A standard way to define a named function.</p>"},{"location":"javascriptConcepts/functions/#syntax","title":"Syntax","text":"<pre><code>function functionName(parameters) {\n  // code\n  return result;\n}\n</code></pre>"},{"location":"javascriptConcepts/functions/#example-add-two-numbers","title":"Example \u2013 Add two numbers","text":"<pre><code>function add(a, b) {\n  return a + b;\n}\n\nlet sum = add(5, 3);\nconsole.log(sum); // 8\n</code></pre> <p>Playwright Use Case: Reusable function to click buttons or fill forms.</p>"},{"location":"javascriptConcepts/functions/#function-expression","title":"\ud83d\udd39 Function Expression","text":"<p>Assign a function to a variable. Can be anonymous.</p>"},{"location":"javascriptConcepts/functions/#syntax_1","title":"Syntax","text":"<pre><code>const functionName = function(parameters) {\n  // code\n  return result;\n};\n</code></pre>"},{"location":"javascriptConcepts/functions/#example-multiply-two-numbers","title":"Example \u2013 Multiply two numbers","text":"<pre><code>const multiply = function(a, b) {\n  return a * b;\n};\n\nconsole.log(multiply(4, 5)); // 20\n</code></pre> <p>Note: You can also create the same function using a function declaration as shown below. Both are valid.</p>"},{"location":"javascriptConcepts/functions/#example-function-declaration-vs-function-expression","title":"Example \u2013 Function Declaration vs Function Expression","text":"<pre><code>// Function Declaration\nfunction multiplyDecl(a, b) {\n  return a * b;\n}\nconsole.log(multiplyDecl(4, 5)); // 20\n\n// Function Expression\nconst multiplyExpr = function(a, b) {\n  return a * b;\n};\nconsole.log(multiplyExpr(4, 5)); // 20\n</code></pre> <p>Key Difference: - Function Declarations are hoisted \u2192 can be called before definition. - Function Expressions are not hoisted \u2192 cannot be called before definition.</p>"},{"location":"javascriptConcepts/functions/#function-with-no-parameters","title":"\ud83d\udd39 Function with No Parameters","text":"<pre><code>function greet() {\n  console.log(\"Hello!\");\n}\n\ngreet(); // Hello!\n</code></pre>"},{"location":"javascriptConcepts/functions/#function-returning-integer","title":"\ud83d\udd39 Function Returning Integer","text":"<pre><code>function square(x) {\n  return x * x;\n}\n\nlet result = square(6);\nconsole.log(result); // 36\n</code></pre>"},{"location":"javascriptConcepts/functions/#function-returning-arraylist","title":"\ud83d\udd39 Function Returning Array/List","text":"<pre><code>function createList() {\n  return [1, 2, 3, 4, 5];\n}\n\nlet numbers = createList();\nconsole.log(numbers); // [1, 2, 3, 4, 5]\n</code></pre>"},{"location":"javascriptConcepts/functions/#function-with-default-parameters","title":"\ud83d\udd39 Function with Default Parameters","text":"<pre><code>function greet(name = \"Guest\") {\n  console.log(`Hello, ${name}!`);\n}\n\ngreet(\"Nitin\"); // Hello, Nitin!\ngreet();         // Hello, Guest!\n</code></pre>"},{"location":"javascriptConcepts/functions/#calling-a-function","title":"\ud83d\udd39 Calling a Function","text":"<ul> <li>Use the function name followed by parentheses: <code>functionName()</code></li> <li>Pass arguments inside parentheses if needed: <code>functionName(arg1, arg2)</code></li> </ul>"},{"location":"javascriptConcepts/functions/#example","title":"Example","text":"<pre><code>function add(a, b) {\n  return a + b;\n}\n\nlet result = add(10, 20);\nconsole.log(result); // 30\n</code></pre>"},{"location":"javascriptConcepts/functions/#summary","title":"\u2705 Summary","text":"<ul> <li>Function Declaration: Named, hoisted, reusable.</li> <li>Function Expression: Anonymous or named, assigned to a variable.</li> <li>Call a function: <code>functionName()</code></li> <li>Return values: Can return integers, arrays, or other data types.</li> <li>Default parameters: Provide fallback values.</li> <li>Hoisting: Declarations are hoisted, expressions are not.</li> </ul> <p>Functions are fundamental building blocks for organizing and reusing code in JavaScript.</p>"},{"location":"javascriptConcepts/operator/","title":"3. Operators in JavaScript \u2013 Deep Dive","text":"<p>JavaScript provides a variety of operators to perform operations on values and variables. Operators can be categorized as Arithmetic, Assignment, Comparison, Logical, Bitwise, and Ternary.  </p>"},{"location":"javascriptConcepts/operator/#arithmetic-operators","title":"\ud83d\udd39 Arithmetic Operators","text":"<p>Used to perform mathematical operations.</p> Operator Description <code>+</code> Addition <code>-</code> Subtraction <code>*</code> Multiplication <code>/</code> Division <code>%</code> Modulus (remainder) <code>**</code> Exponentiation <code>++</code> Increment <code>--</code> Decrement"},{"location":"javascriptConcepts/operator/#examples-arithmetic","title":"Examples \u2013 Arithmetic","text":"<pre><code>let a = 10;\nlet b = 3;\n\nconsole.log(a + b);  // 13\nconsole.log(a - b);  // 7\nconsole.log(a * b);  // 30\nconsole.log(a / b);  // 3.3333\nconsole.log(a % b);  // 1\nconsole.log(a ** 2); // 100\n\na++;\nconsole.log(a);      // 11\nb--;\nconsole.log(b);      // 2\n</code></pre> <p>Playwright Use Case: Calculating dynamic index for lists of elements or iterations.</p>"},{"location":"javascriptConcepts/operator/#assignment-operators","title":"\ud83d\udd39 Assignment Operators","text":"<p>Used to assign values to variables.</p> Operator Description <code>=</code> Assign <code>+=</code> Add and assign <code>-=</code> Subtract and assign <code>*=</code> Multiply and assign <code>/=</code> Divide and assign <code>%=</code> Modulus and assign"},{"location":"javascriptConcepts/operator/#examples-assignment","title":"Examples \u2013 Assignment","text":"<pre><code>let x = 5;\nx += 3;  // x = x + 3\nconsole.log(x); // 8\n\nx *= 2;  // x = x * 2\nconsole.log(x); // 16\n</code></pre>"},{"location":"javascriptConcepts/operator/#comparison-operators","title":"\ud83d\udd39 Comparison Operators","text":"<p>Used to compare values, return <code>true</code> or <code>false</code>.</p> Operator Description <code>==</code> Equal (value only) <code>===</code> Strict equal (value + type) <code>!=</code> Not equal <code>!==</code> Strict not equal <code>&gt;</code> Greater than <code>&lt;</code> Less than <code>&gt;=</code> Greater or equal <code>&lt;=</code> Less or equal"},{"location":"javascriptConcepts/operator/#examples-comparison","title":"Examples \u2013 Comparison","text":"<pre><code>let a = 5;\nlet b = \"5\";\n\nconsole.log(a == b);  // true (value equal)\nconsole.log(a === b); // false (type mismatch)\nconsole.log(a != b);  // false\nconsole.log(a !== b); // true\nconsole.log(a &gt; 3);   // true\nconsole.log(a &lt;= 5);  // true\n</code></pre> <p>Playwright Use Case: Assertions for element counts, text lengths, or response values.</p>"},{"location":"javascriptConcepts/operator/#logical-operators","title":"\ud83d\udd39 Logical Operators","text":"<p>Used to combine boolean expressions.</p> Operator Description <code>&amp;&amp;</code> AND <code>||</code> OR <code>!</code> NOT"},{"location":"javascriptConcepts/operator/#examples-logical","title":"Examples \u2013 Logical","text":"<pre><code>let isLoggedIn = true;\nlet hasAccess = false;\n\nconsole.log(isLoggedIn &amp;&amp; hasAccess); // false\nconsole.log(isLoggedIn || hasAccess); // true\nconsole.log(!isLoggedIn);             // false\n</code></pre> <p>Playwright Use Case: Conditional checks before clicking or filling fields.</p>"},{"location":"javascriptConcepts/operator/#ternary-operator","title":"\ud83d\udd39 Ternary Operator","text":"<p>A shorthand for <code>if...else</code> statements.</p>"},{"location":"javascriptConcepts/operator/#syntax","title":"Syntax","text":"<pre><code>condition ? expression_if_true : expression_if_false;\n</code></pre>"},{"location":"javascriptConcepts/operator/#examples-ternary","title":"Examples \u2013 Ternary","text":"<pre><code>let age = 18;\nlet message = age &gt;= 18 ? \"Adult\" : \"Minor\";\nconsole.log(message); // \"Adult\"\n</code></pre> <p>Playwright Use Case: Quick decision-making for optional actions, like filling optional forms.</p>"},{"location":"javascriptConcepts/operator/#bitwise-operators","title":"\ud83d\udd39 Bitwise Operators","text":"<p>Operate on binary representations of numbers. Rarely used in Playwright but good to know.</p> Operator Description <code>&amp;</code> AND <code>|</code> OR <code>^</code> XOR <code>~</code> NOT <code>&lt;&lt;</code> Left shift <code>&gt;&gt;</code> Right shift <code>&gt;&gt;&gt;</code> Zero-fill right shift"},{"location":"javascriptConcepts/operator/#examples-bitwise","title":"Examples \u2013 Bitwise","text":"<pre><code>let a = 5;  // 0101\nlet b = 3;  // 0011\n\nconsole.log(a &amp; b); // 1  (0001)\nconsole.log(a | b); // 7  (0111)\nconsole.log(a ^ b); // 6  (0110)\nconsole.log(~a);    // -6\n</code></pre>"},{"location":"javascriptConcepts/operator/#summary","title":"\u2705 Summary","text":"<ul> <li>Arithmetic \u2192 <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>++</code>, <code>--</code>, <code>**</code> </li> <li>Assignment \u2192 <code>=</code>, <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code> </li> <li>Comparison \u2192 <code>==</code>, <code>===</code>, <code>!=</code>, <code>!==</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code> </li> <li>Logical \u2192 <code>&amp;&amp;</code>, <code>||</code>, <code>!</code> </li> <li>Ternary \u2192 <code>condition ? expr1 : expr2</code> </li> <li>Bitwise \u2192 <code>&amp;</code>, <code>|</code>, <code>^</code>, <code>~</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code> </li> </ul> <p>These operators are essential for calculations, validations, and conditional logic in Playwright tests.</p>"},{"location":"javascriptConcepts/variables/","title":"2. Variables (var, let, const) \u2013 Deep Dive","text":"<p>JavaScript provides three ways to declare variables: <code>var</code>, <code>let</code>, and <code>const</code>. While all can store values, they differ in scope, re-declaration rules, hoisting behavior, and mutability.  </p>"},{"location":"javascriptConcepts/variables/#var","title":"\ud83d\udd39 var","text":"<ul> <li>Function-scoped: A <code>var</code> declared inside a function is available throughout the function.  </li> <li>Ignores block scope: Declaring inside <code>if</code>, <code>for</code>, or <code>{}</code> does not limit its scope.  </li> <li>Hoisted: Moved to the top of the scope during compilation, initialized with <code>undefined</code>.  </li> <li>Allows re-declaration: You can declare the same variable again in the same scope (not recommended).  </li> </ul>"},{"location":"javascriptConcepts/variables/#example-var-inside-block","title":"Example \u2013 var inside block","text":"<pre><code>if (true) {\n  var x = \"Hello\";\n}\nconsole.log(x); // \u2705 Accessible outside block\n</code></pre>"},{"location":"javascriptConcepts/variables/#example-var-inside-function","title":"Example \u2013 var inside function","text":"<pre><code>function testVar() {\n  if (true) {\n    var inside = \"Function scope\";\n  }\n  console.log(inside); // \u2705 Accessible anywhere inside the function\n}\ntestVar();\nconsole.log(typeof inside); // \u274c undefined globally\n</code></pre>"},{"location":"javascriptConcepts/variables/#example-global-var-usage","title":"Example \u2013 global var usage","text":"<pre><code>var globalVar = \"I am global\";\n\nfunction showGlobal() {\n  console.log(globalVar); // \u2705 Accessible inside function\n}\n\nshowGlobal();\nconsole.log(globalVar); // \u2705 Accessible globally\n</code></pre>"},{"location":"javascriptConcepts/variables/#let","title":"\ud83d\udd39 let","text":"<ul> <li>Block-scoped: Respects <code>{}</code> blocks like if, for, while.  </li> <li>No re-declaration: Cannot be declared twice in the same scope.  </li> <li>Hoisted but uninitialized: Exists in the Temporal Dead Zone (TDZ) until execution reaches its line.  </li> <li>Reassignment allowed.  </li> </ul>"},{"location":"javascriptConcepts/variables/#example-let-inside-block","title":"Example \u2013 let inside block","text":"<pre><code>if (true) {\n  let y = \"Inside block\";\n  console.log(y); // \u2705 Accessible here\n}\n// console.log(y); // \u274c ReferenceError outside block\n</code></pre>"},{"location":"javascriptConcepts/variables/#example-let-reassignment","title":"Example \u2013 let reassignment","text":"<pre><code>let age = 25;\nage = 30; // \u2705 Reassignment allowed\n// let age = 35; // \u274c Cannot redeclare in same scope\n</code></pre>"},{"location":"javascriptConcepts/variables/#const","title":"\ud83d\udd39 const","text":"<ul> <li>Block-scoped (like <code>let</code>).  </li> <li>Must be initialized at declaration.  </li> <li>Cannot be reassigned, but if it\u2019s an object/array, its contents can still be modified.  </li> </ul>"},{"location":"javascriptConcepts/variables/#example-const","title":"Example \u2013 const","text":"<pre><code>const country = \"India\";\n// country = \"USA\"; // \u274c Error: Cannot reassign\n\nconst obj = { name: \"Nitin\" };\nobj.name = \"Patil\"; // \u2705 Allowed (property changed)\nconsole.log(obj);   // { name: \"Patil\" }\n</code></pre>"},{"location":"javascriptConcepts/variables/#global-vs-local-with-var","title":"\ud83d\udd39 Global vs Local with var","text":"<ul> <li>Declaring a variable with <code>var</code> outside any function makes it global.  </li> <li>Reassigning it inside a function changes the global variable.  </li> <li>Re-declaring with <code>var</code> inside a function shadows the global variable instead of modifying it.  </li> </ul>"},{"location":"javascriptConcepts/variables/#example-reassignment-updates-global","title":"Example \u2013 Reassignment updates global","text":"<pre><code>var name = \"Nitin\";  // global\n\nfunction updateGlobal() {\n  name = \"Patil\";   // reassigns global\n}\nupdateGlobal();\nconsole.log(name);  // \u2705 Patil (global updated)\n</code></pre>"},{"location":"javascriptConcepts/variables/#example-shadowing-with-var","title":"Example \u2013 Shadowing with var","text":"<pre><code>var name = \"Nitin\";  // global\n\nfunction shadowGlobal() {\n  var name = \"Local\";  // new local variable\n  console.log(\"Inside:\", name); // Local\n}\nshadowGlobal();\nconsole.log(\"Outside:\", name);  // Nitin (global unchanged)\n</code></pre>"},{"location":"javascriptConcepts/variables/#summary","title":"\u2705 Summary","text":"<ul> <li><code>var</code> \u2192 function-scoped, hoisted, allows re-declaration, unsafe in blocks.  </li> <li><code>let</code> \u2192 block-scoped, safer, hoisted but uninitialized until line of code.  </li> <li><code>const</code> \u2192 block-scoped, must be initialized, immutable binding but mutable objects.  </li> <li>Global vars can be reassigned inside functions.  </li> <li>Re-declaring with <code>var</code> inside a function shadows the global variable.</li> </ul>"},{"location":"playwright-Java/dropdown_handling/","title":"Playwright \u2013 Handling Dropdowns (Java)","text":""},{"location":"playwright-Java/dropdown_handling/#1-classic-select-dropdown","title":"1\ufe0f\u20e3 Classic <code>&lt;select&gt;</code> Dropdown","text":"<p>HTML Example:</p> <pre><code>&lt;select id=\"country\"&gt;\n  &lt;option value=\"IN\"&gt;India&lt;/option&gt;\n  &lt;option value=\"US\"&gt;USA&lt;/option&gt;\n  &lt;option value=\"UK\"&gt;UK&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>"},{"location":"playwright-Java/dropdown_handling/#a-select-by-value","title":"a) Select by Value","text":"<pre><code>page.locator(\"#country\").selectOption(\"IN\");  // Select India by value\n</code></pre>"},{"location":"playwright-Java/dropdown_handling/#b-select-by-label-visible-text","title":"b) Select by Label (Visible Text)","text":"<pre><code>page.locator(\"#country\").selectOption(new SelectOption().setLabel(\"USA\"));\n</code></pre>"},{"location":"playwright-Java/dropdown_handling/#c-select-by-index","title":"c) Select by Index","text":"<pre><code>page.locator(\"#country\").selectOption(new SelectOption().setIndex(2));  // Select 3rd option (UK)\n</code></pre>"},{"location":"playwright-Java/dropdown_handling/#d-iterate-all-options-get-count","title":"d) Iterate All Options &amp; Get Count","text":"<pre><code>Locator options = page.locator(\"#country option\");\nint count = options.count();\nSystem.out.println(\"Total options in dropdown: \" + count);\nfor (int i = 0; i &lt; count; i++) {\n    System.out.println(options.nth(i).innerText());\n}\n</code></pre> <ul> <li> <p>Explanation:</p> </li> <li> <p><code>count()</code> gives total number of options.</p> </li> <li><code>.nth(i).innerText()</code> retrieves text of each option.</li> </ul>"},{"location":"playwright-Java/dropdown_handling/#e-example-full-flow","title":"e) Example Full Flow","text":"<pre><code>// Select India by value\npage.locator(\"#country\").selectOption(\"IN\");\n\n// Iterate and print all options\nLocator options = page.locator(\"#country option\");\nfor (int i = 0; i &lt; options.count(); i++) {\n    System.out.println(options.nth(i).innerText());\n}\n</code></pre>"},{"location":"playwright-Java/dropdown_handling/#2-auto-suggestion-custom-dropdown","title":"2\ufe0f\u20e3 Auto-suggestion / Custom Dropdown","text":"<p>HTML Example:</p> <pre><code>&lt;input id=\"searchCity\" type=\"text\" placeholder=\"Enter city\" /&gt;\n&lt;ul id=\"cityList\"&gt;\n  &lt;li&gt;New York&lt;/li&gt;\n  &lt;li&gt;London&lt;/li&gt;\n  &lt;li&gt;Delhi&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>"},{"location":"playwright-Java/dropdown_handling/#a-type-to-filter-suggestions","title":"a) Type to Filter Suggestions","text":"<pre><code>page.locator(\"#searchCity\").fill(\"Del\");\n</code></pre>"},{"location":"playwright-Java/dropdown_handling/#b-click-on-desired-option","title":"b) Click on Desired Option","text":"<pre><code>page.locator(\"#cityList li\", new Locator.LocatorOptions().setHasText(\"Delhi\")).click();\n</code></pre>"},{"location":"playwright-Java/dropdown_handling/#c-full-auto-suggestion-flow","title":"c) Full Auto-suggestion Flow","text":"<pre><code>// Type in search box\npage.locator(\"#searchCity\").fill(\"Del\");\n\n// Wait for suggestion and click\npage.locator(\"#cityList li\", new Locator.LocatorOptions().setHasText(\"Delhi\")).click();\n</code></pre>"},{"location":"playwright-Java/dropdown_handling/#d-iterate-all-auto-suggestion-options-get-count","title":"d) Iterate All Auto-suggestion Options &amp; Get Count","text":"<pre><code>Locator cities = page.locator(\"#cityList li\");\nint totalCities = cities.count();\nSystem.out.println(\"Total suggestions: \" + totalCities);\nfor (int i = 0; i &lt; totalCities; i++) {\n    System.out.println(cities.nth(i).innerText());\n}\n</code></pre> <ul> <li>Retrieves all suggestions and their total count.</li> </ul>"},{"location":"playwright-Java/dropdown_handling/#e-tips-for-auto-suggestion-dropdowns","title":"e) Tips for Auto-suggestion Dropdowns","text":"<ul> <li>Use <code>fill()</code> instead of <code>type()</code> if you want instant input.</li> <li>Use <code>.locator(...).filter(...).click()</code> to select the correct option.</li> <li>Playwright handles auto-waiting automatically.</li> </ul>"},{"location":"playwright-Java/dropdown_handling/#summary","title":"\u2705 Summary","text":"<ul> <li>Classic <code>&lt;select&gt;</code> dropdowns: Use <code>selectOption()</code> by value, label, or index; iterate with <code>count()</code> and <code>.nth()</code>.</li> <li>Auto-suggestion / custom dropdowns: Type to trigger options, locate desired item and click; iterate options and get count using <code>.count()</code> and <code>.nth()</code>.</li> <li>Playwright auto-waits, so explicit waits are rarely needed.</li> <li>Prefer semantic locators for stability whenever possible.</li> </ul>"},{"location":"playwright-Java/locator/","title":"Playwright Locators \u2013 Complete Guide (Java)","text":"<p>This guide covers all locator strategies in Playwright (Java) with examples, including ARIA roles and accessibility-based locators.</p>"},{"location":"playwright-Java/locator/#example-html","title":"\ud83d\udd39 Example HTML","text":"<pre><code>&lt;input type=\"text\" id=\"email\" class=\"form-control\" placeholder=\"Enter email\" /&gt;\n\n&lt;button id=\"submitBtn\" class=\"btn btn-primary\" type=\"submit\"&gt;Submit&lt;/button&gt;\n\n&lt;span class=\"text\"&gt;Title&lt;/span&gt;\n\n&lt;a href=\"/home\"&gt;Home&lt;/a&gt;\n</code></pre>"},{"location":"playwright-Java/locator/#locator-types","title":"\ud83d\udd39 Locator Types","text":""},{"location":"playwright-Java/locator/#1-by-id","title":"1. By ID","text":"<pre><code>page.locator(\"#email\");\npage.locator(\"#submitBtn\");\n</code></pre>"},{"location":"playwright-Java/locator/#2-by-class","title":"2. By Class","text":"<pre><code>page.locator(\".form-control\");\npage.locator(\".btn.btn-primary\");\n</code></pre>"},{"location":"playwright-Java/locator/#3-by-tag-name","title":"3. By Tag Name","text":"<pre><code>page.locator(\"button\");\npage.locator(\"input\");\n</code></pre>"},{"location":"playwright-Java/locator/#4-by-text-content","title":"4. By Text Content","text":"<pre><code>page.getByText(\"Submit\");\npage.getByText(\"Home\");\n</code></pre>"},{"location":"playwright-Java/locator/#5-by-role-aria-accessibility","title":"5. By Role (ARIA Accessibility)","text":"<p>ARIA roles are accessibility attributes in HTML that define the purpose of an element for screen readers. Playwright\u2019s <code>getByRole</code> uses the accessibility tree.</p> <pre><code>page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Submit\"));\npage.getByRole(AriaRole.LINK, new Page.GetByRoleOptions().setName(\"Home\"));\n</code></pre> <ul> <li>Use <code>getByRole</code> for buttons, links, headings, checkboxes, etc.</li> <li>More stable than CSS/XPath since roles rarely change.</li> <li>Filters elements by their accessible name (text or ARIA label).</li> </ul> <p>Example of explicit role in HTML:</p> <pre><code>&lt;div role=\"button\" aria-label=\"Submit Form\"&gt;Submit&lt;/div&gt;\n</code></pre> <p>Rule of Thumb: Prefer <code>getByRole</code> if a semantic role exists; fallback to XPath/CSS otherwise.</p>"},{"location":"playwright-Java/locator/#6-by-placeholder","title":"6. By Placeholder","text":"<pre><code>page.getByPlaceholder(\"Enter email\");\n</code></pre>"},{"location":"playwright-Java/locator/#7-by-label","title":"7. By Label","text":"<pre><code>&lt;label for=\"email\"&gt;Email&lt;/label&gt;\n&lt;input id=\"email\" /&gt;\n</code></pre> <pre><code>page.getByLabel(\"Email\");\n</code></pre>"},{"location":"playwright-Java/locator/#8-by-alt-text","title":"8. By Alt Text","text":"<pre><code>&lt;img src=\"logo.png\" alt=\"Company Logo\"&gt;\n</code></pre> <pre><code>page.getByAltText(\"Company Logo\");\n</code></pre>"},{"location":"playwright-Java/locator/#9-by-title-attribute","title":"9. By Title Attribute","text":"<pre><code>&lt;button title=\"Click to submit\"&gt;Submit&lt;/button&gt;\n</code></pre> <pre><code>page.getByTitle(\"Click to submit\");\n</code></pre>"},{"location":"playwright-Java/locator/#10-by-css-attribute-selector","title":"10. By CSS Attribute Selector","text":"<pre><code>page.locator(\"input[type='text']\");\npage.locator(\"button[type='submit']\");\npage.locator(\"a[href='/home']\");\n</code></pre>"},{"location":"playwright-Java/locator/#11-by-xpath","title":"11. By XPath","text":"<pre><code>page.locator(\"//button[text()='Submit']\");\npage.locator(\"//input[@id='email']\");\n</code></pre>"},{"location":"playwright-Java/locator/#handling-multiple-matches","title":"\ud83d\udd39 Handling Multiple Matches","text":"<pre><code>&lt;ul&gt;\n  &lt;li class=\"item\"&gt;Apple&lt;/li&gt;\n  &lt;li class=\"item\"&gt;Banana&lt;/li&gt;\n  &lt;li class=\"item\"&gt;Cherry&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <pre><code>Locator items = page.locator(\".item\");\nint count = items.count();\n\nitems.nth(0);  // Apple\nitems.nth(1);  // Banana\nitems.nth(2);  // Cherry\n\nfor (int i = 0; i &lt; count; i++) {\n    System.out.println(items.nth(i).innerText());\n}\n\nLocator banana = page.locator(\".item\").filter(new Locator.FilterOptions().setHasText(\"Banana\"));\n\npage.locator(\".item\").first();\npage.locator(\".item\").last();\n</code></pre>"},{"location":"playwright-Java/locator/#summary","title":"\ud83d\udd39 Summary","text":"<ul> <li>Use semantic locators (<code>getByRole</code>, <code>getByLabel</code>, <code>getByPlaceholder</code>) for stable and accessibility-compliant tests.  </li> <li>Use CSS/XPath only if necessary.  </li> <li>Manage multiple elements using <code>.count()</code>, <code>.nth()</code>, <code>.first()</code>, <code>.last()</code>, <code>.filter()</code>.  </li> <li>ARIA roles ensure robust, readable, and accessible test selection.</li> </ul>"},{"location":"playwright-Java/playwright-interaction/","title":"Playwright Interactions \u2013 Input &amp; Buttons (Java)","text":""},{"location":"playwright-Java/playwright-interaction/#1-typing-entering-text-into-input-boxes","title":"1\ufe0f\u20e3 Typing / Entering Text into Input Boxes","text":"<p>Selenium Equivalent:</p> <pre><code>driver.findElement(By.id(\"searchBox\")).sendKeys(\"Playwright\");\n</code></pre>"},{"location":"playwright-Java/playwright-interaction/#a-using-fill","title":"a) Using <code>fill()</code>","text":"<pre><code>page.locator(\"#searchBox\").fill(\"Playwright\");\n</code></pre> <ul> <li>What it does: Clears any existing text and sets the new value.</li> <li>Auto-waiting: Waits until the element is visible and enabled.</li> <li>Best for: Setting values directly in forms.</li> </ul>"},{"location":"playwright-Java/playwright-interaction/#b-using-type","title":"b) Using <code>type()</code>","text":"<pre><code>page.locator(\"#searchBox\").type(\"Playwright\");\n</code></pre> <ul> <li>What it does: Types character by character, simulating real user typing.</li> <li>Difference from <code>fill()</code>: </li> <li><code>fill()</code> instantly sets the value.  </li> <li><code>type()</code> simulates typing and triggers keyboard events.  </li> <li>Best for: Autocomplete, search boxes, or typing behavior testing.</li> </ul>"},{"location":"playwright-Java/playwright-interaction/#c-pressing-keys","title":"c) Pressing Keys","text":"<pre><code>page.locator(\"#searchBox\").fill(\"Playwright\");\npage.locator(\"#searchBox\").press(\"Enter\");\n</code></pre> <ul> <li>Equivalent to: <code>sendKeys(Keys.ENTER)</code> in Selenium.</li> <li>Use case: Submitting forms via keyboard.</li> </ul>"},{"location":"playwright-Java/playwright-interaction/#d-example-full-search-box-flow","title":"d) Example Full Search Box Flow","text":"<pre><code>page.locator(\"#searchBox\").fill(\"Playwright\");  // Type text instantly\npage.locator(\"#searchBox\").press(\"Enter\");      // Submit by Enter key\n</code></pre>"},{"location":"playwright-Java/playwright-interaction/#difference-between-fill-and-type","title":"Difference Between <code>fill()</code> and <code>type()</code>","text":"Feature <code>fill()</code> <code>type()</code> Action Sets value instantly Types character by character Auto-clear Yes, clears existing text No, appends to existing text unless cleared manually Speed Fast Slower, simulates typing Events triggered Minimal Triggers keypress, input events Best for Form filling Autocomplete, typing simulation, keyboard events"},{"location":"playwright-Java/playwright-interaction/#2-clicking-on-buttons","title":"2\ufe0f\u20e3 Clicking on Buttons","text":"<p>Selenium Equivalent:</p> <pre><code>driver.findElement(By.id(\"submitBtn\")).click();\n</code></pre>"},{"location":"playwright-Java/playwright-interaction/#a-simple-click","title":"a) Simple Click","text":"<pre><code>page.locator(\"#submitBtn\").click();\n</code></pre> <ul> <li>Waits automatically for the button to be visible and enabled.</li> <li>No need for <code>Thread.sleep()</code> or explicit waits.</li> </ul>"},{"location":"playwright-Java/playwright-interaction/#b-click-by-text","title":"b) Click by Text","text":"<pre><code>page.getByText(\"Submit\").click();\n</code></pre> <ul> <li>Finds element by visible text.</li> <li>Useful if ID or class is not available.</li> </ul>"},{"location":"playwright-Java/playwright-interaction/#c-click-by-role-aria","title":"c) Click by Role (ARIA)","text":"<pre><code>page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Submit\")).click();\n</code></pre> <ul> <li>Uses accessibility info (semantic role).</li> <li>Very stable; less likely to break if HTML changes.</li> <li>Recommended for modern accessible web apps.</li> </ul>"}]}